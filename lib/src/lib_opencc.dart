// Copyright (c) 2024, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field, unused_element
import 'dart:ffi' as ffi;

/// Makes an instance of opencc
///
/// @param configFileName Location of configuration file. If this is set to NULL,
/// OPENCC_DEFAULT_CONFIG_SIMP_TO_TRAD will be loaded.
/// @return            A description pointer of the newly allocated instance of
/// opencc. On error the return value will be (opencc_t) -1.
/// @ingroup opencc_c_api
@ffi.Native<opencc_t Function(ffi.Pointer<ffi.Char>)>(symbol: 'opencc_open')
external opencc_t opencc_open(
  ffi.Pointer<ffi.Char> configFileName,
);

/// Destroys an instance of opencc
///
/// @param opencc The description pointer.
/// @return 0 on success or non-zero number on failure.
/// @ingroup opencc_c_api
@ffi.Native<ffi.Int Function(opencc_t)>(symbol: 'opencc_close')
external int opencc_close(
  opencc_t opencc,
);

/// Converts UTF-8 std::string
///
/// @param opencc The opencc description pointer.
/// @param input  The UTF-8 encoded std::string.
/// @param length The maximum length in byte to convert. If length is (size_t)-1,
/// the whole std::string (terminated by '\0') will be converted.
/// @param output The buffer to store converted text. You MUST make sure this
/// buffer has sufficient space.
///
/// @return       The length of converted std::string or (size_t)-1 on error.
///
/// @ingroup opencc_c_api
@ffi.Native<
    ffi.Size Function(opencc_t, ffi.Pointer<ffi.Char>, ffi.Size,
        ffi.Pointer<ffi.Char>)>(symbol: 'opencc_convert_utf8_to_buffer')
external int opencc_convert_utf8_to_buffer(
  opencc_t opencc,
  ffi.Pointer<ffi.Char> input,
  int length,
  ffi.Pointer<ffi.Char> output,
);

/// Converts UTF-8 std::string
/// This function returns an allocated C-Style std::string, which stores
/// the converted std::string.
/// You MUST call opencc_convert_utf8_free() to release allocated memory.
///
/// @param opencc The opencc description pointer.
/// @param input  The UTF-8 encoded std::string.
/// @param length The maximum length in byte to convert. If length is (size_t)-1,
/// the whole std::string (terminated by '\0') will be converted.
///
/// @return       The newly allocated UTF-8 std::string that stores text
/// converted, or NULL on error.
/// @ingroup opencc_c_api
@ffi.Native<
    ffi.Pointer<ffi.Char> Function(opencc_t, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'opencc_convert_utf8')
external ffi.Pointer<ffi.Char> opencc_convert_utf8(
  opencc_t opencc,
  ffi.Pointer<ffi.Char> input,
  int length,
);

/// Releases allocated buffer by opencc_convert_utf8
///
/// @param str    Pointer to the allocated std::string buffer by
/// opencc_convert_utf8.
///
/// @ingroup opencc_c_api
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'opencc_convert_utf8_free')
external void opencc_convert_utf8_free(
  ffi.Pointer<ffi.Char> str,
);

/// Returns the last error message
///
/// Note that this function is the only one which is NOT thread-safe.
///
/// @ingroup opencc_c_api
@ffi.Native<ffi.Pointer<ffi.Char> Function()>(symbol: 'opencc_error')
external ffi.Pointer<ffi.Char> opencc_error();

/// Type of opencc descriptor
///
/// @ingroup opencc_c_api
typedef opencc_t = ffi.Pointer<ffi.Void>;

const String OPENCC_DEFAULT_CONFIG_SIMP_TO_TRAD = 's2t.json';

const String OPENCC_DEFAULT_CONFIG_TRAD_TO_SIMP = 't2s.json';
